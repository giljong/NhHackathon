<!DOCTYPE html>
<html lang="en" >
<head>
  <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/vuetify@1.1.10/dist/vuetify.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Material+Icons" rel="stylesheet">
  <title>관리자페이지</title>
  <meta charset="UTF-8" name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui">
</head>
<body>
  <style>
    img { display: block; margin: 0px auto; }
    @import url(//fonts.googleapis.com/earlyaccess/nanumgothic.css);
    .create-data-btn {
      position: fixed;
      bottom: 0;
      right: 0;
    }
  </style>
  <div id="app">
  <v-app id="list-sample">
      <v-flex sm6 offset-sm3>
        <v-text-field label="Search Data..."
                      v-model="search">
        </v-text-field>
        <v-list two-line
                v-for="(listItem, index) in calData"
                :key="index">
          <v-list-tile>
            <v-list-tile-content>
              <v-list-tile-title class="text--primary">
                {{ listItem.subject }}
              </v-list-tile-title>
              <v-list-tile-sub-title>
                {{ listItem.desc }}
              </v-list-tile-sub-title>
            </v-list-tile-content>

            <v-list-tile-action>
              <v-icon ripple
                      @click="onEdit(index)">
                edit
              </v-icon>
              <v-btn icon>
                 <v-icon ripple @click="map">my_location</v-icon>
               </v-btn>
            </v-list-tile-action>
          </v-list-tile>
          <v-divider></v-divider>
        </v-list>
        <br/>
        <v-pagination
          v-model="curPageNum"
          :length="numOfPages">
        </v-pagination>
      </v-flex>

      <v-layout class="create-data-btn">
        <v-btn fab
               dark
               color="indigo"
               @click="onAdd">
          <v-icon dark>
            add
          </v-icon>
        </v-btn>
      </v-layout>


        <v-dialog v-model="addDialog"
                persistent
                max-width="500px"
                @keydown.esc="closeDialog">
        <base-modal>
          <div slot="title"
               class="headline">Product data
          </div>
          <v-container slot="content"
                       grid-list-md>
            <v-layout wrap>
              <v-flex xs12>
                <v-text-field label="Catagorize"
                              v-model="newData.subject"
                              required>
                </v-text-field>
              </v-flex>
              <v-flex xs12>
                <v-text-field label="Address"
                              v-model="newData.address"
                              required>
                </v-text-field>
              </v-flex>
            </v-layout>
          </v-container>
          <v-btn slot="negative-button"
                 color="blue darken-1"
                 flat
                 @click="closeDialog">
            Close
          </v-btn>
          <v-btn slot="positive-button"
                 color="blue darken-1"
                 flat
                 @click="submit">
            Save
          </v-btn>
        </base-modal>
      </v-dialog>

      <v-dialog v-model="editDialog"
                persistent
                max-width="500px"
                @keydown.esc="closeDialog">
        <base-modal>
          <div slot="title"
               class="headline">Edit Data
          </div>
          <v-container slot="content"
                       grid-list-md>
            <v-layout wrap>
              <v-flex xs12>
                <v-text-field
                  label="Catagorize"
                  v-model="selectedData.subject"
                  required>
                </v-text-field>
              </v-flex>
              <v-flex xs12>
                <v-text-field
                  label="Address"
                  v-model="selectedData.address"
                  required
                  @keydown.enter="editData">
                </v-text-field>
              </v-flex>
            </v-layout>
          </v-container>
          <v-btn slot="negative-button"
                 color="blue darken-1"
                 flat
                 @click="closeDialog">
            Close
          </v-btn>
          <v-btn slot="positive-button"
                 color="blue darken-1"
                 flat
                 @click="editData">
            Save
          </v-btn>
        </base-modal>
      </v-dialog>

      <v-dialog v-model="removeDialog"
                max-width="500px"
                @keydown.esc="removeDialog=false"
                @keydown.enter="removeData"
                persistent>
        <base-modal>
          <div slot="title"
               class="headline">Remove Data
          </div>
          <v-btn slot="negative-button"
                 color="blue darken-1"
                 flat
                 @click="closeDialog">
            Cancel
          </v-btn>
          <v-btn slot="positive-button"
                 color="blue darken-1"
                 flat
                 @click="removeData">
            Confirm
          </v-btn>
        </base-modal>
      </v-dialog>
    </v-app>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/babel-polyfill/dist/polyfill.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.17/vue.min.js"></script>
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/vuetify/1.1.10/vuetify.min.js"></script>
  <script>


    new Vue({
      el: '#app',
        data() {
          return {
            addDialog: false,
            editDialog: false,
            removeDialog: false,
            search: '',
            listData: [],
            searchData: [],
            dataPerPage: 10,
            curPageNum: 1,
            curSelectIndex: 0,

            newData: {
              id: Number,
              subject: '',
              desc: '',
              address:'',
              catagorize: ''
            },
            selectedData: {
              id: Number,
              subject: '',
              desc: '',
              address: '',
              catagorize: ''
            }
          }
        },
        created() {
          // this.axios.get('http://localhost:8080/server/listTest.json')
          //   .then((response) => {
          //     this.listData = response.data;
          //     console.log(this.listData);
          //   });
          this.listData = productdata;
        },
        computed: {
          startOffset() {
            return ((this.curPageNum - 1) * this.dataPerPage);
          },
          endOffset() {
            return (this.startOffset + this.dataPerPage);
          },
          numOfPages() {
            return Math.ceil(this.searchData.length / this.dataPerPage);
          },
          calData() {
            this.searchData = this.listData.filter((data) => {
              return data.subject.toLowerCase().includes(this.search.toLowerCase())
            }).slice(0);

            return this.searchData.slice(this.startOffset, this.endOffset)
          }
        },
        methods: {
          submit() {
            const submitData = {
              id: this.newData.id,
              subject: this.newData.subject,
              desc: this.newData.desc,
              address: this.newData.address,
              catagorize: this.newData.catagorize
            };

            this.addData(submitData);
            this.closeDialog();
            this.clearForm();
          },
          editData() {
            const editData = {
              id: this.selectedData.id,
              subject: this.selectedData.subject,
              desc: this.selectedData.desc,
              address: this.selectedData.address,
              catagorize: this.selectedData.catagorize
            };
            axios.post("/admin/addP", {data : {address: editData.address, subject: editData.subject, catagorize: editData.catagorize}});
            this.listData.splice(this.curSelectIndex, 1, editData);
            this.closeDialog();
          },
          addData(submitData) {
            this.listData.push(submitData);
            this.curPageNum = this.numOfPages;
            axios.post("/admin/addP", {data : {address: submitData.address, subject: submitData.subject, catagorize: submitData.catagorize}});
          },
          removeData() {
            this.listData.splice(this.curSelectIndex, 1);
            if (this.calData.length === 0) {
              this.prevPage();
            }
            this.closeDialog();
          },
          onAdd() {
            this.addDialog = true;
          },
          map() {
            location.href="/admin/list";
          },
          onRemove(index) {
            this.curSelectIndex = this.calIndex(index);

            this.removeDialog = true;
          },
          onEdit(index) {
            this.curSelectIndex = this.calIndex(index);
            this.selectedData.id = this.listData[this.curSelectIndex].id;
            this.selectedData.subject = this.listData[this.curSelectIndex].subject;
            this.selectedData.desc = this.listData[this.curSelectIndex].desc;
            this.selectedData.address = this.listData[this.curSelectIndex].address;
            this.selectedData.catagorize = this.listData[this.curSelectIndex].catagorize;
            this.editDialog = true;
          },
          calIndex(index) {
            switch (this.curPageNum) {
              case 1:
                return index;
                break;
              default:
                return index + ((this.curPageNum - 1) * this.dataPerPage);
                break;
            }
          },
          clearForm() {
            for (let key in this.newData) {
              this.newData[key] = '';
            }
          },
          prevPage() {
            this.curPageNum--;
          },
          closeDialog() {
            this.addDialog = false;
            this.editDialog = false;
            this.removeDialog = false;
          }
        }
    })

    Vue.component('BaseModal', {
      template: `
      <v-card>
        <v-card-title>
          <slot name="title"></slot>
        </v-card-title>
        <v-card-text>
          <slot name="content"></slot>
        </v-card-text>
        <v-card-actions>
          <v-spacer></v-spacer>
          <slot name="negative-button"></slot>
          <slot name="positive-button"></slot>
        </v-card-actions>
      </v-card>
      `
    })
  </script>
</body>
